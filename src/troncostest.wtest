import wollok.game.*
import niveles.*
import config.*
import background.*
import terreno.*

describe "Test de troncos" {
	
	const nivelTest = new NivelTest()
	const rana = config.objPrincipal()
	const tronco = nivelTest.troncos().first()
	

	test "La rana esta en el tronco" {
		
		config.iniciarParaTesting(nivelTest)

		const posTronco= tronco.position()
		const columnaNeta = posTronco.x().div(background.tamanio_celda())
		const alturaTronco = tronco.altura()
		const posicionConSuperficieMarina = new Position(x = posTronco.x(), y = posTronco.y() + (alturaTronco / 2))
		rana.mover(posicionConSuperficieMarina)
		
		terreno.buscarObjetosEnColumna(columnaNeta)
		assert.that(rana.tieneSuperficieMarina())
		assert.that(rana.contacto() != null)
		assert.that(terreno.estaEnAgua(rana.position().x()))
	}

	test "Verificar que la rana se mueve junto con el tronco"{
		config.iniciarParaTesting(nivelTest)

		const posTronco= tronco.position()
		const alturaTronco = tronco.altura()
		const posicionConSuperficieMarina = new Position(x = posTronco.x(), y = posTronco.y() + (alturaTronco / 2))
		
		rana.mover(posicionConSuperficieMarina)
		tronco.ejecutarContacto()
		rana.contacto(tronco)
		tronco.mover()
		
		assert.that(rana.position() == posicionConSuperficieMarina.down(1))
		assert.that(rana.tieneSuperficieMarina())
		assert.that(terreno.estaEnAgua(rana.position().x()))
		tronco.mover()
		assert.that(rana.position() == posicionConSuperficieMarina.down(2))
		tronco.mover()
		tronco.mover() //vamos verificando que a medida que se mueva el tronco, 
		tronco.mover() //la rana se mueva con el
		assert.that(rana.position() == posicionConSuperficieMarina.down(5))
		
	}
}